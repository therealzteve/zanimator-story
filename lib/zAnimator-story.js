(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.zAnimatorStory = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  var handler = {};

  handler.handle = function (data) {
    data = (0, _optionsPreparer2.default)(data);
    data.parent.add(data.child);
  };

  return handler;
};

var _optionsPreparer = require(3);

var _optionsPreparer2 = _interopRequireDefault(_optionsPreparer);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}


},{"3":3}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  var handler = {};

  handler.handle = function (data) {
    var path = options.zAnimator;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = data.type.split('.')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var typePart = _step.value;

        path = path[typePart];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    (0, _optionsPreparer2.default)(data.options);
    _idPool2.default.set(data.id, path(data.options));
  };

  return handler;
};

var _optionsPreparer = require(3);

var _optionsPreparer2 = _interopRequireDefault(_optionsPreparer);

var _idPool = require(7);

var _idPool2 = _interopRequireDefault(_idPool);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}


},{"3":3,"7":7}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _idPool = require(7);

var _idPool2 = _interopRequireDefault(_idPool);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var prepareOptions = function prepareOptions(options) {

  for (var parameter in options) {
    if (typeof options[parameter] === 'string' && options[parameter].substring(0, 1) === '$') {
      options[parameter] = _idPool2.default.get(options[parameter].substring(1));
    }
  }

  return options;
};

exports.default = prepareOptions;


},{"7":7}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  var handler = {};

  handler.handle = function (data) {

    (0, _optionsPreparer2.default)(data.options);

    for (var param in data.options) {
      _idPool2.default.get(data.id)[param] = data.options[param];
    }
  };

  return handler;
};

var _optionsPreparer = require(3);

var _optionsPreparer2 = _interopRequireDefault(_optionsPreparer);

var _idPool = require(7);

var _idPool2 = _interopRequireDefault(_idPool);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}


},{"3":3,"7":7}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  var handler = {};

  handler.handle = function (data) {
    _idPool2.default.get(data.id).start();
  };

  return handler;
};

var _idPool = require(7);

var _idPool2 = _interopRequireDefault(_idPool);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}


},{"7":7}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  var handler = {};

  handler.handle = function (data) {
    _idPool2.default.get(data.id).stop();
  };

  return handler;
};

var _idPool = require(7);

var _idPool2 = _interopRequireDefault(_idPool);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}


},{"7":7}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var idPool = function idPool() {
  var poolObject = {};
  var pool = {};

  poolObject.init = function (mainContainer) {
    pool['0'] = mainContainer;
  };

  poolObject.clean = function () {
    if (pool['0']) {
      pool['0'].removeAll();
      pool = {};
    }
  };

  poolObject.get = function (id) {
    console.log('get ' + id);
    return pool[id];
  };

  poolObject.set = function (id, value) {
    console.log('set ' + id);
    pool[id] = value;
  };

  poolObject.update = function () {
    for (var id in pool) {
      if (pool[id].draw) {
        pool[id].draw();
      }
    }
  };

  return poolObject;
};

exports.default = idPool();


},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;

var _storyHandler = require(10);

var _storyHandler2 = _interopRequireDefault(_storyHandler);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function create(options) {
  var zAnimator = options.zAnimator;
  var sHandler = (0, _storyHandler2.default)({ zAnimator: zAnimator });
  if (options.interval) {
    sHandler.interval = options.interval;
  }

  return {
    play: function play(story) {
      sHandler.story = JSON.parse(JSON.stringify(story));
      sHandler.start();
    },
    stop: function stop() {
      sHandler.stop();
    }
  };
}


},{"10":10}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  var storyReader = {};

  storyReader.handlers = {};
  storyReader.handlers.create = (0, _createHandler2.default)({ zAnimator: options.zAnimator });
  storyReader.handlers.add = (0, _addHandler2.default)({ zAnimator: options.zAnimator });
  storyReader.handlers.prop = (0, _propHandler2.default)({});
  storyReader.handlers.start = (0, _startHandler2.default)();
  storyReader.handlers.stop = (0, _stopHandler2.default)();

  storyReader.read = function (storyPart) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = storyPart[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var command = _step.value;

        storyReader.handlers[command.action].handle(command.data);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };

  return storyReader;
};

var _createHandler = require(2);

var _createHandler2 = _interopRequireDefault(_createHandler);

var _addHandler = require(1);

var _addHandler2 = _interopRequireDefault(_addHandler);

var _propHandler = require(4);

var _propHandler2 = _interopRequireDefault(_propHandler);

var _startHandler = require(5);

var _startHandler2 = _interopRequireDefault(_startHandler);

var _stopHandler = require(6);

var _stopHandler2 = _interopRequireDefault(_stopHandler);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}


},{"1":1,"2":2,"4":4,"5":5,"6":6}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  var internalTimer = (0, _timer2.default)(handler);
  var storyReader = (0, _storyReader2.default)({ zAnimator: options.zAnimator });
  var storyHandler = {};
  storyHandler.timePassed = 0;
  storyHandler.interval = 100; // ~60 fps
  storyHandler.lastFrame = -1;
  storyHandler.story = false;

  storyHandler.start = function () {
    console.log('starting new story');
    _idPool2.default.init(options.zAnimator.mainContainer);
    storyHandler.timePassed = 0;
    storyHandler.lastFrame = -1;
    storyHandler.play();
  };

  storyHandler.stop = function () {
    storyHandler.pause();
    storyHandler.timePassed = 0;
    storyHandler.lastFrame = -1;
    _idPool2.default.clean();
  };

  storyHandler.play = function () {
    if (storyHandler.story) {
      internalTimer.start();
    } else {
      console.warn('No story was set before. Aborting play.');
    }
  };

  storyHandler.pause = function () {
    internalTimer.stop();
  };

  function checkIfFinished() {
    for (var i = 0; i < storyHandler.story.timeSlots.length; i++) {
      var timeSlotIndex = Math.floor(storyHandler.timePassed / storyHandler.interval / Math.pow(2, i));
      if (timeSlotIndex < storyHandler.story.timeSlots[i].length) {
        return false;
      }
    }
    return true;
  }

  var tellStory = function tellStory() {

    // Handle each timeslots
    for (var i = 0; i < storyHandler.story.timeSlots.length; i++) {
      var timeSlotIndex = Math.floor(storyHandler.timePassed / storyHandler.interval / Math.pow(2, i));
      if (timeSlotIndex > storyHandler.lastFrame / Math.pow(2, i)) {
        if (timeSlotIndex >= storyHandler.story.timeSlots[i].length) {
          continue;
        }
        storyReader.read(storyHandler.story.timeSlots[i][timeSlotIndex]);
      }
    }
    storyHandler.lastFrame = Math.floor(storyHandler.timePassed / storyHandler.interval);
    _idPool2.default.update();
    if (checkIfFinished()) {
      storyHandler.stop();
    }
  };

  function handler(time) {
    storyHandler.timePassed += time;

    tellStory();
  }

  return storyHandler;
};

var _timer = require(11);

var _timer2 = _interopRequireDefault(_timer);

var _storyReader = require(9);

var _storyReader2 = _interopRequireDefault(_storyReader);

var _idPool = require(7);

var _idPool2 = _interopRequireDefault(_idPool);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}


},{"11":11,"7":7,"9":9}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (callback) {
  var timer = {};

  timer.start = function () {
    createjs.Ticker.addEventListener('tick', timer.handle);
  };

  timer.stop = function () {
    createjs.Ticker.removeEventListener('tick', timer.handle);
  };

  timer.handle = function (event) {
    callback(event.delta);
  };

  return timer;
};


},{}]},{},[8])(8)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
